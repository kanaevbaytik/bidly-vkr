//
//  BidService.swift
//  Bidly
//
//  Created by Baytik  on 21/6/25.
//

import Foundation

final class BidService {
    
    static let shared = BidService()
    private init() {}

    func placeBid(amount: Int, auctionItemId: String, completion: @escaping (Result<Void, Error>) -> Void) {
        guard let accessToken = KeychainManager.shared.get("accessToken") else {
            print("‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –≤ Keychain")
            completion(.failure(NSError(domain: "–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞", code: 401)))
            return
        }

        var components = URLComponents(string: "\(API.baseURL)/auction/bid/")!
        components.queryItems = [
            .init(name: "amount", value: "\(amount)"),
            .init(name: "auctionItemId", value: auctionItemId)
        ]

        guard let url = components.url else {
            print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π URL")
            completion(.failure(NSError(domain: "–û—à–∏–±–∫–∞ URL", code: 400)))
            return
        }

        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("Bearer \(accessToken)", forHTTPHeaderField: "Authorization")

        print("üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞–≤–∫–∏: \(url)")
        print("üîê –¢–æ–∫–µ–Ω: \(accessToken.prefix(12))...")

        URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error {
                print("‚ùå –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞:", error)
                completion(.failure(error))
                return
            }

            if let httpResponse = response as? HTTPURLResponse {
                print("üì¨ –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: \(httpResponse.statusCode)")
                if (200...299).contains(httpResponse.statusCode) {
                    completion(.success(()))
                } else {
                    completion(.failure(NSError(domain: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", code: httpResponse.statusCode)))
                }
            } else {
                completion(.failure(NSError(domain: "–ù–µ—Ç HTTP –æ—Ç–≤–µ—Ç–∞", code: 500)))
            }
        }.resume()
    }
}
